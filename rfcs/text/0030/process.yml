# Licensed to Elasticsearch B.V. under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Elasticsearch B.V. licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 	http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
---
- name: process
  reusable:
    top_level: true
    expected:
      - at: process
        as: entry_leader
        short_override: Information about the entry session leader process.
      - at: process
        as: session_leader
        short_override: Information about the session leader process.
      - at: process
        as: group_leader
        short_override: Information about the process group leader process.
      - at: process.session_leader
        as: parent 
        short_override: Information about the session leaders parent. 

  fields:
    
    # Deprecation note: Because we are nesting process.group_leader above, it makes sense to deprecate process.pgid as this information can be accessed via process.group_leader.pid

    - name: previous_args
      level: extended
      type: keyword
      short: Array of process arguments the previous fork or exec.
      description: >
        Array of process arguments, starting with the absolute path to the executable.

        May be filtered to protect sensitive information.
      example: "[\"/usr/bin/ssh\", \"-l\", \"user\", \"10.0.0.16\"]"
      normalize:
        - array

    - name: previous_args_count
      level: extended
      type: long
      short: Length of the process.previous_args array.
      description: >
        Length of the process.previous_args array.

        This field can be useful for querying or performing bucket analysis on
        how many arguments were provided to start a process.
        More arguments may be an indication of suspicious activity.
      example: 4

    - name: previous_executable
      level: extended
      type: keyword
      description: >
        Absolute path to the process previous executable.
      example: /usr/bin/ssh
      multi_fields:
        - type: match_only_text
          name: text

    - name: interactive
      level: extended
      type: boolean
      example: true
      short: Whether the process is connected to an interactive shell.
      description: >
        Whether the process is connected to an interactive shell.

        Process interactivity is infered from the processes file descriptors. If the character device for the controlling tty is the same as stdin and stderr for the process, the process is considered interactive.

        Note: A non-interactive process can belong to an interactive session and is simply one that does not have open file descriptors reading the controlling TTY on FD 0 (stdin) or writing to the controlling TTY on FD 2 (stderr). A backgrounded process is still considered interactive if stdin and stderr are connected to the controlling TTY.

    - name: fds
      level: extended
      type: object
      short: An array of the lowest file descriptors for the process.
      description: >
        An array of the lowest file descriptors for the process.

        Typically includes fd0(stdin), fd1(stdout), fd2(stderr), but can include other non character devices such as files, sockets, pipes and FIFOs.

      example: >
        [
          {
            descriptor:0,
            type: 'char_device',
            char_device: {
              major: 8,
              minor: 1
            }
          },
          {
            descriptor:1,
            type:'char_device',
            char_device: {
              major: 8,
              minor: 1
            }
          },
          {
            descriptor:9,
            type:'pipe',
            pipe: {
              inode: '6183207'
            }
          }
        ]

      normalize:
        - array

    - name: env_vars
      level: extended
      type: object
      short: Environment variables set at the time of the event.
      description: >
        Environment variables set at the time of the event.

        May be filtered to protect sensitive information.
      example: >
        {
          "USER": "elastic",
          "LANG": "en_US.UTF-8",
          "HOME": "/home/elastic"
        }

    - name: entry_meta.type
      level: extended
      type: keyword
      short: The entry mechanism.
      description: >
        The entry mechanism.

        Values include: init(e.g systemd), sshd, ssm, kubelet, teleport, terminal, console

    - name: entry_meta.source
      level: extended
      type: source
      short: Entry point information for a session.
      description: >
        Entry point information for a session.

        Remote client information such as ip, port and geo location.
